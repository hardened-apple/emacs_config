commit 31f983aadaebf8feef0465c1b8a67985a45979d9
Author: hardenedapple <hardenedapple@server.fake>
Date:   Wed Mar 30 13:42:32 2016 +0100

    Account for older version

diff --git a/config/01_general_settings.el b/config/01_general_settings.el
index 1457bdd..d901586 100644
--- a/config/01_general_settings.el
+++ b/config/01_general_settings.el
@@ -223,7 +223,7 @@ Think `completion-at-point' functions, but only one function at a time")
                               (symbol-name find-definition-function)))))
     (if existing-function
         (find-this-definition-helper symbol existing-function)
-      (let ((current-symbol (thing-at-point 'symbol t)))
+      (let ((current-symbol (thing-at-point 'symbol)))
         (run-function-other-window #'find-this-definition nil
                                current-symbol)))))
 
@@ -236,7 +236,7 @@ Think `completion-at-point' functions, but only one function at a time")
 (defun get-clicked-symbol (event)
   "Move to event point, and find the symbol at point."
   (mouse-set-point event)
-  (let ((current-symbol (thing-at-point 'symbol t)))
+  (let ((current-symbol (thing-at-point 'symbol)))
     current-symbol))
 
 (defmacro mouse-function-on-symbol (&rest body)
@@ -260,7 +260,7 @@ Think `completion-at-point' functions, but only one function at a time")
                                 (ignore-errors (previous-line (* numtimes 5)))))
 (define-key search-map "O"
   (lambda () (interactive)
-    (occur (concat "\\_<" (thing-at-point 'symbol t) "\\_>"))))
+    (occur (concat "\\_<" (thing-at-point 'symbol) "\\_>"))))
 
 ;; Taken from http://oremacs.com/2015/01/26/occur-dwim/ -- makes a guess for
 ;; the default search pattern with occur.
diff --git a/config/69_filetype_specific_settings.el b/config/69_filetype_specific_settings.el
index 23b3d6d..088bf54 100644
--- a/config/69_filetype_specific_settings.el
+++ b/config/69_filetype_specific_settings.el
@@ -5,8 +5,8 @@
 (c-set-offset 'case-label '+)
 
 ;;; Use double quotes by default in awk, C, C++ and some others.
-(with-eval-after-load 'cc-vars
-  (add-hook 'c-mode-common-hook 'keyswap-include-quotes))
+(eval-after-load 'cc-vars
+  '(progn (add-hook 'c-mode-common-hook 'keyswap-include-quotes)))
 
 
 ;;;; Comint Mode
@@ -41,10 +41,10 @@ that buffer, and follows it."
 ;;;;
 (setq latex-run-command "pdflatex")
 
-(with-eval-after-load 'tex-mode
-  ;; Note -- order here is important
-  (add-hook 'latex-mode-hook 'turn-on-shifted-keys t)
-  (add-hook 'latex-mode-hook 'keyswap-include-braces t))
+(eval-after-load 'tex-mode
+ '(progn ;; Note -- order here is important
+   (add-hook 'latex-mode-hook 'turn-on-shifted-keys t)
+   (add-hook 'latex-mode-hook 'keyswap-include-braces t)))
 
 
 ;;;; Lisp Settings
@@ -69,8 +69,8 @@ https://github.com/Malabarba/speed-of-thought-lisp"
 (define-key lisp-mode-shared-map (kbd "M-s M-s") 'delete-pair)
 
 
-(with-eval-after-load 'lisp-mode
-  (define-key emacs-lisp-mode-map [mouse-3]
+(eval-after-load 'lisp-mode
+  '(progn (define-key emacs-lisp-mode-map [mouse-3]
     (mouse-function-on-symbol (help-xref-interned (intern current-symbol))
                               (pop-tag-mark)))
   ;; Really don't know why emacs makes this a local key binding when there's
@@ -78,14 +78,11 @@ https://github.com/Malabarba/speed-of-thought-lisp"
   (define-key emacs-lisp-mode-map (kbd "M-C-i") nil)
   (define-key lisp-interaction-mode-map (kbd "M-C-i") nil)
   (add-hook 'emacs-lisp-mode-hook 'keyswap-tac-underscore-exception)
-  (add-hook 'lisp-mode-hook 'keyswap-tac-underscore-exception))
+  (add-hook 'lisp-mode-hook 'keyswap-tac-underscore-exception)))
 
-(add-hook 'eval-expression-minibuffer-setup-hook 'turn-on-shifted-keys)
-(add-hook 'eval-expression-minibuffer-setup-hook 'keyswap-tac-underscore-exception)
-
-(with-eval-after-load 'ielm
-    (add-hook 'ielm-mode-hook 'keyswap-tac-underscore-exception)
-    (add-hook 'ielm-mode-hook 'turn-on-shifted-keys))
+(eval-after-load 'ielm
+    '(progn (add-hook 'ielm-mode-hook 'keyswap-tac-underscore-exception)
+            (add-hook 'ielm-mode-hook 'toggle-shifted-keys)))
 
 (setq inferior-lisp-program "/usr/bin/sbcl")
 
@@ -132,6 +129,6 @@ stops the current python process using `delete-process' rather than
 ;
 ;;;; Javascript Settings
 ;;;;
-(with-eval-after-load 'js
-  (add-hook 'js-mode-hook 'keyswap-include-braces)
-  (add-hook 'js-mode-hook 'keyswap-tac-underscore-exception))
+(eval-after-load 'js
+ '(progn (add-hook 'js-mode-hook 'keyswap-include-braces)
+  (add-hook 'js-mode-hook 'keyswap-tac-underscore-exception)))
diff --git a/config/79_built_in_packages.el b/config/79_built_in_packages.el
index c8f404d..b6b68dd 100644
--- a/config/79_built_in_packages.el
+++ b/config/79_built_in_packages.el
@@ -319,6 +319,28 @@ as yet."
 
 ;;;; ISearch Settings
 ;;;;
+;; Taken from a later version of emacs
+(defun find-tag-default-bounds ()
+  "Determine the boundaries of the default tag, based on text at point.
+Return a cons cell with the beginning and end of the found tag.
+If there is no plausible default, return nil."
+  (let (from to bound)
+    (when (or (progn
+                ;; Look at text around `point'.
+                (save-excursion
+                  (skip-syntax-backward "w_") (setq from (point)))
+                (save-excursion
+                  (skip-syntax-forward "w_") (setq to (point)))
+                (> to from))
+              ;; Look between `line-beginning-position' and `point'.
+              (save-excursion
+                (and (setq bound (line-beginning-position))
+                     (skip-syntax-forward "^w_" bound)
+                     (< (setq from (point)) bound)
+                     (skip-syntax-forward "w_")
+                     (setq to (point)))))
+      (cons from to))))
+
 (defun snappy-isearch-symbol-at-point (forwards)
   "Do the same as `isearch-forward-symbol-at-point', but snappier.
 
@@ -428,11 +450,11 @@ don't have the package installed."
       org-default-notes-file (concat org-directory "/notes.org")
       org-agenda-files (list "~/TODO.org"))
 
-(with-eval-after-load 'org
-    ;; Remove the CYCLE-ORG-AGENDA-FILES mapping to leave the
-    ;; GOTO-LAST-CHANGE-REVERSE global mapping
-    ;; Don't really use ORG-MODE's agenda functionality anyway
-    (define-key org-mode-map (kbd "C-,") nil))
+(eval-after-load 'org
+ '(progn   ;; Remove the CYCLE-ORG-AGENDA-FILES mapping to leave the
+     ;; GOTO-LAST-CHANGE-REVERSE global mapping
+     ;; Don't really use ORG-MODE's agenda functionality anyway
+     (define-key org-mode-map (kbd "C-,") nil)))
 
 
 ;;;; Process Menu Settings
@@ -460,17 +482,11 @@ don't have the package installed."
  python-shell-interpreter "ipython"
  python-shell-interpreter-args ""
  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
- python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
- python-shell-completion-setup-code
- "from IPython.core.completerlib import module_completion"
- python-shell-completion-module-string-code
- "';'.join(module_completion('''%s'''))\n"
- python-shell-completion-string-code
- "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
-
-(with-eval-after-load 'python
-    (define-key inferior-python-mode-map (kbd "TAB")
-      'python-shell-completion-complete-or-indent))
+ python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")
+
+(eval-after-load 'python
+ '(progn   (define-key inferior-python-mode-map (kbd "TAB")
+                 'python-shell-completion-complete-or-indent)))
 
 
 ;;;; Regexp Builder
diff --git a/config/89_non_evil_plugin_settings.el b/config/89_non_evil_plugin_settings.el
index e7154c2..1fc3bc4 100644
--- a/config/89_non_evil_plugin_settings.el
+++ b/config/89_non_evil_plugin_settings.el
@@ -334,8 +334,8 @@ Calls `eshell/cd' to the value of `magit-get-top-dir'"
 
 ;; Paredit M-r overrides M-r in comint
 ;; Want comint-history-isearch-backward-regexp, so remap it to C-q
-(with-eval-after-load 'ielm
-  (define-key ielm-map (kbd "C-q") 'comint-history-isearch-backward-regexp))
+(eval-after-load 'ielm
+ '(progn (define-key ielm-map (kbd "C-q") 'comint-history-isearch-backward-regexp)))
 
 ;;; paredit with eldoc
 (eldoc-add-command
@@ -492,34 +492,34 @@ and run a command given by the user in that window.
 
 (global-set-key (kbd "C-c s") 'slime-selector)
 
-(with-eval-after-load 'slime
-  ;; Make TAB do my completion, and since I don't have any way to
-  ;; press C-j, remap `slime-eval-last-expression-in-repl' to C-c C-i
-  ;; (C-i for "interpreter") instead of `slime-complete-symbol', which
-  ;; I'll now use TAB for.
-  (define-key slime-mode-map (kbd "TAB") 'slime-indent-and-complete-symbol)
-  (define-key slime-mode-map (kbd "C-c C-i") 'slime-eval-last-expression-in-repl)
-  ;; Remove the M-? mapping for `slime-edit-uses', can still use M-_,
-  ;; but `paredit-convolute-sexp' is now unshadowed.
-  (define-key slime-mode-map (kbd "M-?") nil)
-  (define-key slime-mode-map [mouse-3]
-    (lambda (event) (interactive "e") (slime-pop-find-definition-stack)))
-  (add-hook 'slime-mode-hook
-            (lambda () (setq find-definition-function 'slime-edit-definition))))
+(eval-after-load 'slime
+ '(progn ;; Make TAB do my completion, and since I don't have any way to
+   ;; press C-j, remap `slime-eval-last-expression-in-repl' to C-c C-i
+   ;; (C-i for "interpreter") instead of `slime-complete-symbol', which
+   ;; I'll now use TAB for.
+   (define-key slime-mode-map (kbd "TAB") 'slime-indent-and-complete-symbol)
+   (define-key slime-mode-map (kbd "C-c C-i") 'slime-eval-last-expression-in-repl)
+   ;; Remove the M-? mapping for `slime-edit-uses', can still use M-_,
+   ;; but `paredit-convolute-sexp' is now unshadowed.
+   (define-key slime-mode-map (kbd "M-?") nil)
+   (define-key slime-mode-map [mouse-3]
+               (lambda (event) (interactive "e") (slime-pop-find-definition-stack)))
+   (add-hook 'slime-mode-hook
+             (lambda () (setq find-definition-function 'slime-edit-definition)))))
 
 (defun keyswap-hook-for-slime-repl ()
   "Hook to handle swapping keys in the slime repl."
   (unless (keymapp (current-local-map))
     (use-local-map (make-sparse-keymap))))
 
-(with-eval-after-load 'slime-repl
-  ;; These hooks have to be added in a certain order.
-  ;; The buffer local map has to be created first, then the exception created,
-  ;; then the keys toggled.
-  ;; I use the APPEND argument to put them after one another so the order is clear
-  (add-hook 'slime-repl-mode-hook 'keyswap-hook-for-slime-repl t)
-  (add-hook 'slime-repl-mode-hook 'keyswap-tac-underscore-exception t)
-  (add-hook 'slime-repl-mode-hook 'turn-on-shifted-keys t))
+(eval-after-load 'slime-repl
+ '(progn ;; These hooks have to be added in a certain order.
+   ;; The buffer local map has to be created first, then the exception created,
+   ;; then the keys toggled.
+   ;; I use the APPEND argument to put them after one another so the order is clear
+   (add-hook 'slime-repl-mode-hook 'keyswap-hook-for-slime-repl t)
+   (add-hook 'slime-repl-mode-hook 'keyswap-tac-underscore-exception t)
+   (add-hook 'slime-repl-mode-hook 'turn-on-shifted-keys t)))
 
 (setq slime-autodoc-use-multiline-p t)
 
diff --git a/init.el b/init.el
index 9c17e5a..ef5eac2 100644
--- a/init.el
+++ b/init.el
@@ -23,7 +23,7 @@
       (elpa-packages '(avy arduino-mode buffer-move c-eldoc elisp-slime-nav
                                      expand-region goto-chg ido-ubiquitous
                                      ido-at-point ido-vertical-mode jump-char
-                                     list-register magit monky multiple-cursors
+                                     list-register monky multiple-cursors
                                      paredit projectile python-pylint quack
                                      smart-tab smart-window smex undo-tree
                                      vimrc-mode window-number wrap-region
